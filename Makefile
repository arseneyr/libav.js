

# NOTE: This file is generated by m4! Make sure you're editing the .m4 version,
# not the generated version!

LIBAVJS_VERSION=3.8.5.1
EMCC=emcc
MINIFIER=node_modules/.bin/uglifyjs -m
CFLAGS=-Oz -g1
EFLAGS=\
	--memory-init-file 0 --post-js post.js --extern-post-js extern-post.js \
	-s "EXPORT_NAME='LibAVFactory'" \
	-s "EXPORTED_FUNCTIONS=@exports.json" \
	-s "EXPORTED_RUNTIME_METHODS=['ccall', 'cwrap']" \
	-s MODULARIZE=1 \
	-s ASYNCIFY \
	-s "ASYNCIFY_IMPORTS=['libavjs_read_async']" \
	-s ALLOW_MEMORY_GROWTH=1

all: build-default

include mk/*.mk


build-%: libav-$(LIBAVJS_VERSION)-%.js libav-$(LIBAVJS_VERSION)-%.mjs
	true

libav-$(LIBAVJS_VERSION)-%.js: libav-$(LIBAVJS_VERSION).js \
	libav-$(LIBAVJS_VERSION)-%.asm.js \
	libav-$(LIBAVJS_VERSION)-%.wasm.js \
	libav-$(LIBAVJS_VERSION)-%.simd.js \
	libav-$(LIBAVJS_VERSION)-%.min.mjs \
	node_modules/.bin/uglifyjs
	sed "s/@CONFIG/$*/g" < $< > $@
	chmod a-x *.wasm

libav-$(LIBAVJS_VERSION)-%.mjs: libav-$(LIBAVJS_VERSION)-%.js
	printf "var LibAV;\nexport default LibAV;\n" | cat $< - > $@

libav-$(LIBAVJS_VERSION)-%.wasm.js: export EMCC_DEBUG=1

# General build rule for any target
# Use: buildrule(target file name, target inst name, CFLAGS, 

avformat.mjs: export CFLAGS += -fPIC
# avformat.mjs: export EMCC_DEBUG=1

avformat.mjs: EFLAGS = \
	--memory-init-file 0 --post-js post.js --extern-post-js extern-post.js \
	-s "EXPORT_NAME='LibAVFactory'" \
	-s "EXPORTED_FUNCTIONS=@min-exports" \
	-s "EXPORTED_RUNTIME_METHODS=['ccall', 'cwrap']" \
	-sMODULARIZE \
	-sASYNCIFY \
	-s "ASYNCIFY_IMPORTS=['avjs_read_async']" \
	-sALLOW_MEMORY_GROWTH \
	-sEXPORT_ES6 \
	-s "ENVIRONMENT='web'" \
	-sMAIN_MODULE=2 \
	-sNO_FILESYSTEM 

avformat.mjs: ffmpeg-$(FFMPEG_VERSION)/build-base-mux-only/libavformat/libavformat.a bindings_min.c post.js extern-post.js min-exports
	$(EMCC) -O0 -g -gsource-map --source-map-base "/node_modules/libav.js/" $(EFLAGS) -sLLD_REPORT_UNDEFINED \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-base-mux-only \
		`test ! -e configs/mux-only/link-flags.txt || cat configs/mux-only/link-flags.txt` \
		bindings_min.c \
		ffmpeg-$(FFMPEG_VERSION)/build-base-mux-only/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-mux-only/libavutil/libavutil.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-mux-only/libavcodec/libavcodec.a \
		`test ! -e configs/mux-only/libs.txt || sed 's/@TARGET/base/' configs/mux-only/libs.txt` -o $(@)

# asm.js version

libav-$(LIBAVJS_VERSION)-%.asm.js: ffmpeg-$(FFMPEG_VERSION)/build-base-%/libavformat/libavformat.a \
	exports.json post.js extern-post.js bindings.c
	$(EMCC) $(CFLAGS) $(EFLAGS) -s WASM=0 \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-base-$(*) \
		`test ! -e configs/$(*)/link-flags.txt || cat configs/$(*)/link-flags.txt` \
		bindings.c \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavfilter/libavfilter.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavcodec/libavcodec.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libswresample/libswresample.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavutil/libavutil.a \
		`grep LIBAVJS_WITH_SWSCALE configs/$(*)/link-flags.txt > /dev/null 2>&1 && echo 'ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libswscale/libswscale.a'` \
		`test ! -e configs/$(*)/libs.txt || sed 's/@TARGET/base/' configs/$(*)/libs.txt` -o $(@)
	cat configs/$(*)/license.js $(@) > $(@).tmp
	mv $(@).tmp $(@)

# wasm version with no added features

libav-$(LIBAVJS_VERSION)-%.wasm.js: ffmpeg-$(FFMPEG_VERSION)/build-base-%/libavformat/libavformat.a \
	exports.json post.js extern-post.js bindings.c
	$(EMCC) $(CFLAGS) $(EFLAGS)  \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-base-$(*) \
		`test ! -e configs/$(*)/link-flags.txt || cat configs/$(*)/link-flags.txt` \
		bindings.c \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavfilter/libavfilter.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavcodec/libavcodec.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libswresample/libswresample.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavutil/libavutil.a \
		`grep LIBAVJS_WITH_SWSCALE configs/$(*)/link-flags.txt > /dev/null 2>&1 && echo 'ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libswscale/libswscale.a'` \
		`test ! -e configs/$(*)/libs.txt || sed 's/@TARGET/base/' configs/$(*)/libs.txt` -o $(@)
	cat configs/$(*)/license.js $(@) > $(@).tmp
	mv $(@).tmp $(@)

# wasm + threads

libav-$(LIBAVJS_VERSION)-%.thr.js: ffmpeg-$(FFMPEG_VERSION)/build-thr-%/libavformat/libavformat.a \
	exports.json post.js extern-post.js bindings.c
	$(EMCC) $(CFLAGS) $(EFLAGS) -pthread \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-thr-$(*) \
		`test ! -e configs/$(*)/link-flags.txt || cat configs/$(*)/link-flags.txt` \
		bindings.c \
		ffmpeg-$(FFMPEG_VERSION)/build-thr-$(*)/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thr-$(*)/libavfilter/libavfilter.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thr-$(*)/libavcodec/libavcodec.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thr-$(*)/libswresample/libswresample.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thr-$(*)/libavutil/libavutil.a \
		`grep LIBAVJS_WITH_SWSCALE configs/$(*)/link-flags.txt > /dev/null 2>&1 && echo 'ffmpeg-$(FFMPEG_VERSION)/build-thr-$(*)/libswscale/libswscale.a'` \
		`test ! -e configs/$(*)/libs.txt || sed 's/@TARGET/thr/' configs/$(*)/libs.txt` -o $(@)
	cat configs/$(*)/license.js $(@) > $(@).tmp
	mv $(@).tmp $(@)

# wasm + simd

libav-$(LIBAVJS_VERSION)-%.simd.js: ffmpeg-$(FFMPEG_VERSION)/build-simd-%/libavformat/libavformat.a \
	exports.json post.js extern-post.js bindings.c
	$(EMCC) $(CFLAGS) $(EFLAGS) -msimd128 \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-simd-$(*) \
		`test ! -e configs/$(*)/link-flags.txt || cat configs/$(*)/link-flags.txt` \
		bindings.c \
		ffmpeg-$(FFMPEG_VERSION)/build-simd-$(*)/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-simd-$(*)/libavfilter/libavfilter.a \
		ffmpeg-$(FFMPEG_VERSION)/build-simd-$(*)/libavcodec/libavcodec.a \
		ffmpeg-$(FFMPEG_VERSION)/build-simd-$(*)/libswresample/libswresample.a \
		ffmpeg-$(FFMPEG_VERSION)/build-simd-$(*)/libavutil/libavutil.a \
		`grep LIBAVJS_WITH_SWSCALE configs/$(*)/link-flags.txt > /dev/null 2>&1 && echo 'ffmpeg-$(FFMPEG_VERSION)/build-simd-$(*)/libswscale/libswscale.a'` \
		`test ! -e configs/$(*)/libs.txt || sed 's/@TARGET/simd/' configs/$(*)/libs.txt` -o $(@)
	cat configs/$(*)/license.js $(@) > $(@).tmp
	mv $(@).tmp $(@)

# wasm + threads + simd

libav-$(LIBAVJS_VERSION)-%.thrsimd.js: ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-%/libavformat/libavformat.a \
	exports.json post.js extern-post.js bindings.c
	$(EMCC) $(CFLAGS) $(EFLAGS) -pthread -msimd128 \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*) \
		`test ! -e configs/$(*)/link-flags.txt || cat configs/$(*)/link-flags.txt` \
		bindings.c \
		ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*)/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*)/libavfilter/libavfilter.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*)/libavcodec/libavcodec.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*)/libswresample/libswresample.a \
		ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*)/libavutil/libavutil.a \
		`grep LIBAVJS_WITH_SWSCALE configs/$(*)/link-flags.txt > /dev/null 2>&1 && echo 'ffmpeg-$(FFMPEG_VERSION)/build-thrsimd-$(*)/libswscale/libswscale.a'` \
		`test ! -e configs/$(*)/libs.txt || sed 's/@TARGET/thrsimd/' configs/$(*)/libs.txt` -o $(@)
	cat configs/$(*)/license.js $(@) > $(@).tmp
	mv $(@).tmp $(@)



libav-$(LIBAVJS_VERSION)-%.min.mjs: ffmpeg-$(FFMPEG_VERSION)/build-base-%/libavformat/libavformat.a \
	exports.json post.js extern-post.js bindings.c
	$(EMCC) $(CFLAGS) $(EFLAGS) -s EXPORT_ES6=1 \
		-Iffmpeg-$(FFMPEG_VERSION) -Iffmpeg-$(FFMPEG_VERSION)/build-base-$(*) \
		`test ! -e configs/$(*)/link-flags.txt || cat configs/$(*)/link-flags.txt` \
		bindings.c \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavformat/libavformat.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavfilter/libavfilter.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavcodec/libavcodec.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libswresample/libswresample.a \
		ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libavutil/libavutil.a \
		`grep LIBAVJS_WITH_SWSCALE configs/$(*)/link-flags.txt > /dev/null 2>&1 && echo 'ffmpeg-$(FFMPEG_VERSION)/build-base-$(*)/libswscale/libswscale.a'` \
		`test ! -e configs/$(*)/libs.txt || sed 's/@TARGET/base/' configs/$(*)/libs.txt` -o $(@)
	cat configs/$(*)/license.js $(@) > $(@).tmp
	mv $(@).tmp $(@)


libav-$(LIBAVJS_VERSION).js exports.json libav.types.d.ts: libav.in.js \
	funcs.json \
	apply-funcs.js \
	libav.types.in.d.ts
	./apply-funcs.js $(LIBAVJS_VERSION)

post.js: node_modules/.bin/tsc post.ts post.d.ts types.d.mts tsconfig.json
	node_modules/.bin/tsc

node_modules/.bin/uglifyjs node_modules/.bin/tsc:
	npm install

# Targets
tmp-inst/base/cflags.txt:
	mkdir -p tmp-inst/base
	touch $@

tmp-inst/thr/cflags.txt:
	mkdir -p tmp-inst/thr
	echo '-pthread' > $@

tmp-inst/simd/cflags.txt:
	mkdir -p tmp-inst/simd
	echo '-msimd128' > $@

tmp-inst/thrsimd/cflags.txt:
	mkdir -p tmp-inst/thrsimd
	echo '-pthread -msimd128' > $@

release:
	mkdir libav.js-$(LIBAVJS_VERSION)
	for v in default lite fat obsolete opus flac opus-flac webm webm-opus-flac mediarecorder-transcoder open-media; \
	do \
	    $(MAKE) build-$$v; \
	    cp libav-$(LIBAVJS_VERSION)-$$v.js \
	       libav-$(LIBAVJS_VERSION)-$$v.asm.js \
	       libav-$(LIBAVJS_VERSION)-$$v.wasm.js \
	       libav-$(LIBAVJS_VERSION)-$$v.wasm.wasm \
	       libav-$(LIBAVJS_VERSION)-$$v.simd.js \
	       libav-$(LIBAVJS_VERSION)-$$v.simd.wasm \
	       libav.js-$(LIBAVJS_VERSION)/; \
	done
	mkdir libav.js-$(LIBAVJS_VERSION)/sources
	for t in ffmpeg lame libaom libogg libvorbis libvpx opus; \
	do \
	    $(MAKE) $$t-release; \
	done
	cp libav.types.d.ts libav.js-$(LIBAVJS_VERSION)/
	git archive HEAD -o libav.js-$(LIBAVJS_VERSION)/sources/libav.js.tar
	xz libav.js-$(LIBAVJS_VERSION)/sources/libav.js.tar
	zip -r libav.js-$(LIBAVJS_VERSION).zip libav.js-$(LIBAVJS_VERSION)
	rm -rf libav.js-$(LIBAVJS_VERSION)

publish:
	unzip libav.js-$(LIBAVJS_VERSION).zip
	( cd libav.js-$(LIBAVJS_VERSION) && \
	  cp ../package.json ../README.md . && \
	  npm publish )
	rm -rf libav.js-$(LIBAVJS_VERSION)

halfclean:
	-rm -f libav-$(LIBAVJS_VERSION)-*.js libav-$(LIBAVJS_VERSION)-*.wasm
	-rm -f exports.json libav-$(LIBAVJS_VERSION).js post.js libav.types.d.ts

clean: halfclean
	-rm -rf tmp-inst
	-rm -rf opus-$(OPUS_VERSION)
	-rm -rf libaom-$(LIBAOM_VERSION)
	-rm -rf libvorbis-$(LIBVORBIS_VERSION)
	-rm -rf libogg-$(LIBOGG_VERSION)
	-rm -rf libvpx-$(LIBVPX_VERSION)
	-rm -rf lame-$(LAME_VERSION)
	-rm -rf openh264-$(OPENH264_VERSION)
	-rm -rf ffmpeg-$(FFMPEG_VERSION)

distclean: clean
	-rm -f opus-$(OPUS_VERSION).tar.gz
	-rm -f libaom-$(LIBAOM_VERSION).tar.gz
	-rm -f libvorbis-$(LIBVORBIS_VERSION).tar.xz
	-rm -f libogg-$(LIBOGG_VERSION).tar.xz
	-rm -f libvpx-$(LIBVPX_VERSION).tar.gz
	-rm -f lame-$(LAME_VERSION).tar.gz
	-rm -rf openh264-$(OPENH264_VERSION).tar.gz
	-rm -f ffmpeg-$(FFMPEG_VERSION).tar.xz

.PRECIOUS: \
	libav-$(LIBAVJS_VERSION)-%.js \
	libav-$(LIBAVJS_VERSION)-%.mjs \
	libav-$(LIBAVJS_VERSION)-%.min.mjs \
	libav-$(LIBAVJS_VERSION)-%.asm.js \
	libav-$(LIBAVJS_VERSION)-%.wasm.js \
	libav-$(LIBAVJS_VERSION)-%.thr.js \
	libav-$(LIBAVJS_VERSION)-%.simd.js \
	libav-$(LIBAVJS_VERSION)-%.thrsimd.js
