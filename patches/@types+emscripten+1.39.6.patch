diff --git a/node_modules/@types/emscripten/index.d.ts b/node_modules/@types/emscripten/index.d.ts
index 356f550..66d7577 100755
--- a/node_modules/@types/emscripten/index.d.ts
+++ b/node_modules/@types/emscripten/index.d.ts
@@ -9,93 +9,93 @@
 
 /** Other WebAssembly declarations, for compatibility with older versions of Typescript */
 declare namespace WebAssembly {
-    interface Module {}
+  interface Module { }
 }
 
 declare namespace Emscripten {
-    interface FileSystemType {}
-    type EnvironmentType = 'WEB' | 'NODE' | 'SHELL' | 'WORKER';
-
-    type JSType = 'number' | 'string' | 'array' | 'boolean';
-    type TypeCompatibleWithC = number | string | any[] | boolean;
-
-    type CIntType = 'i8' | 'i16' | 'i32' | 'i64';
-    type CFloatType = 'float' | 'double';
-    type CPointerType = 'i8*' | 'i16*' | 'i32*' | 'i64*' | 'float*' | 'double*' | '*';
-    type CType = CIntType | CFloatType | CPointerType;
-
-    type WebAssemblyImports = Array<{
-        name: string;
-        kind: string;
-    }>;
-
-    type WebAssemblyExports = Array<{
-        module: string;
-        name: string;
-        kind: string;
-    }>;
-
-    interface CCallOpts {
-        async?: boolean | undefined;
-    }
+  interface FileSystemType { }
+  type EnvironmentType = 'WEB' | 'NODE' | 'SHELL' | 'WORKER';
+
+  type JSType = 'number' | 'string' | 'array' | 'boolean';
+  type TypeCompatibleWithC = number | string | any[] | boolean;
+
+  type CIntType = 'i8' | 'i16' | 'i32' | 'i64';
+  type CFloatType = 'float' | 'double';
+  type CPointerType = 'i8*' | 'i16*' | 'i32*' | 'i64*' | 'float*' | 'double*' | '*';
+  type CType = CIntType | CFloatType | CPointerType;
+
+  type WebAssemblyImports = Array<{
+    name: string;
+    kind: string;
+  }>;
+
+  type WebAssemblyExports = Array<{
+    module: string;
+    name: string;
+    kind: string;
+  }>;
+
+  interface CCallOpts {
+    async?: boolean | undefined;
+  }
 }
 
 interface EmscriptenModule {
-    print(str: string): void;
-    printErr(str: string): void;
-    arguments: string[];
-    environment: Emscripten.EnvironmentType;
-    preInit: Array<{ (): void }>;
-    preRun: Array<{ (): void }>;
-    postRun: Array<{ (): void }>;
-    onAbort: { (what: any): void };
-    onRuntimeInitialized: { (): void };
-    preinitializedWebGLContext: WebGLRenderingContext;
-    noInitialRun: boolean;
-    noExitRuntime: boolean;
-    logReadFiles: boolean;
-    filePackagePrefixURL: string;
-    wasmBinary: ArrayBuffer;
-
-    destroy(object: object): void;
-    getPreloadedPackage(remotePackageName: string, remotePackageSize: number): ArrayBuffer;
-    instantiateWasm(
-        imports: Emscripten.WebAssemblyImports,
-        successCallback: (module: WebAssembly.Module) => void,
-    ): Emscripten.WebAssemblyExports;
-    locateFile(url: string, scriptDirectory: string): string;
-    onCustomMessage(event: MessageEvent): void;
-
-    // USE_TYPED_ARRAYS == 1
-    HEAP: Int32Array;
-    IHEAP: Int32Array;
-    FHEAP: Float64Array;
-
-    // USE_TYPED_ARRAYS == 2
-    HEAP8: Int8Array;
-    HEAP16: Int16Array;
-    HEAP32: Int32Array;
-    HEAPU8: Uint8Array;
-    HEAPU16: Uint16Array;
-    HEAPU32: Uint32Array;
-    HEAPF32: Float32Array;
-    HEAPF64: Float64Array;
-
-    TOTAL_STACK: number;
-    TOTAL_MEMORY: number;
-    FAST_MEMORY: number;
-
-    addOnPreRun(cb: () => any): void;
-    addOnInit(cb: () => any): void;
-    addOnPreMain(cb: () => any): void;
-    addOnExit(cb: () => any): void;
-    addOnPostRun(cb: () => any): void;
-
-    preloadedImages: any;
-    preloadedAudios: any;
-
-    _malloc(size: number): number;
-    _free(ptr: number): void;
+  print(str: string): void;
+  printErr(str: string): void;
+  arguments: string[];
+  environment: Emscripten.EnvironmentType;
+  preInit: Array<{ (): void }>;
+  preRun: Array<{ (): void }>;
+  postRun: Array<{ (): void }>;
+  onAbort: { (what: any): void };
+  onRuntimeInitialized: { (): void };
+  preinitializedWebGLContext: WebGLRenderingContext;
+  noInitialRun: boolean;
+  noExitRuntime: boolean;
+  logReadFiles: boolean;
+  filePackagePrefixURL: string;
+  wasmBinary: ArrayBuffer;
+
+  destroy(object: object): void;
+  getPreloadedPackage(remotePackageName: string, remotePackageSize: number): ArrayBuffer;
+  instantiateWasm(
+    imports: Emscripten.WebAssemblyImports,
+    successCallback: (module: WebAssembly.Module) => void,
+  ): Emscripten.WebAssemblyExports;
+  locateFile(url: string, scriptDirectory: string): string;
+  onCustomMessage(event: MessageEvent): void;
+
+  // USE_TYPED_ARRAYS == 1
+  HEAP: Int32Array;
+  IHEAP: Int32Array;
+  FHEAP: Float64Array;
+
+  // USE_TYPED_ARRAYS == 2
+  HEAP8: Int8Array;
+  HEAP16: Int16Array;
+  HEAP32: Int32Array;
+  HEAPU8: Uint8Array;
+  HEAPU16: Uint16Array;
+  HEAPU32: Uint32Array;
+  HEAPF32: Float32Array;
+  HEAPF64: Float64Array;
+
+  TOTAL_STACK: number;
+  TOTAL_MEMORY: number;
+  FAST_MEMORY: number;
+
+  addOnPreRun(cb: () => any): void;
+  addOnInit(cb: () => any): void;
+  addOnPreMain(cb: () => any): void;
+  addOnExit(cb: () => any): void;
+  addOnPostRun(cb: () => any): void;
+
+  preloadedImages: any;
+  preloadedAudios: any;
+
+  _malloc(size: number): number;
+  _free(ptr: number): void;
 }
 
 /**
@@ -112,141 +112,141 @@ interface EmscriptenModule {
  * @param moduleOverrides Default properties for the initialized module.
  */
 type EmscriptenModuleFactory<T extends EmscriptenModule = EmscriptenModule> = (
-    moduleOverrides?: Partial<T>,
+  moduleOverrides?: Partial<T>,
 ) => Promise<T>;
 
 declare namespace FS {
-    interface Lookup {
-        path: string;
-        node: FSNode;
-    }
-
-    interface FSStream {}
-    interface FSNode {}
-    interface ErrnoError {}
-
-    let ignorePermissions: boolean;
-    let trackingDelegate: any;
-    let tracking: any;
-    let genericErrors: any;
-
-    //
-    // paths
-    //
-    function lookupPath(path: string, opts: any): Lookup;
-    function getPath(node: FSNode): string;
-
-    //
-    // nodes
-    //
-    function isFile(mode: number): boolean;
-    function isDir(mode: number): boolean;
-    function isLink(mode: number): boolean;
-    function isChrdev(mode: number): boolean;
-    function isBlkdev(mode: number): boolean;
-    function isFIFO(mode: number): boolean;
-    function isSocket(mode: number): boolean;
-
-    //
-    // devices
-    //
-    function major(dev: number): number;
-    function minor(dev: number): number;
-    function makedev(ma: number, mi: number): number;
-    function registerDevice(dev: number, ops: any): void;
-
-    //
-    // core
-    //
-    function syncfs(populate: boolean, callback: (e: any) => any): void;
-    function syncfs(callback: (e: any) => any, populate?: boolean): void;
-    function mount(type: Emscripten.FileSystemType, opts: any, mountpoint: string): any;
-    function unmount(mountpoint: string): void;
-
-    function mkdir(path: string, mode?: number): any;
-    function mkdev(path: string, mode?: number, dev?: number): any;
-    function symlink(oldpath: string, newpath: string): any;
-    function rename(old_path: string, new_path: string): void;
-    function rmdir(path: string): void;
-    function readdir(path: string): any;
-    function unlink(path: string): void;
-    function readlink(path: string): string;
-    function stat(path: string, dontFollow?: boolean): any;
-    function lstat(path: string): any;
-    function chmod(path: string, mode: number, dontFollow?: boolean): void;
-    function lchmod(path: string, mode: number): void;
-    function fchmod(fd: number, mode: number): void;
-    function chown(path: string, uid: number, gid: number, dontFollow?: boolean): void;
-    function lchown(path: string, uid: number, gid: number): void;
-    function fchown(fd: number, uid: number, gid: number): void;
-    function truncate(path: string, len: number): void;
-    function ftruncate(fd: number, len: number): void;
-    function utime(path: string, atime: number, mtime: number): void;
-    function open(path: string, flags: string, mode?: number, fd_start?: number, fd_end?: number): FSStream;
-    function close(stream: FSStream): void;
-    function llseek(stream: FSStream, offset: number, whence: number): any;
-    function read(stream: FSStream, buffer: ArrayBufferView, offset: number, length: number, position?: number): number;
-    function write(
-        stream: FSStream,
-        buffer: ArrayBufferView,
-        offset: number,
-        length: number,
-        position?: number,
-        canOwn?: boolean,
-    ): number;
-    function allocate(stream: FSStream, offset: number, length: number): void;
-    function mmap(
-        stream: FSStream,
-        buffer: ArrayBufferView,
-        offset: number,
-        length: number,
-        position: number,
-        prot: number,
-        flags: number,
-    ): any;
-    function ioctl(stream: FSStream, cmd: any, arg: any): any;
-    function readFile(path: string, opts: { encoding: 'binary'; flags?: string | undefined }): Uint8Array;
-    function readFile(path: string, opts: { encoding: 'utf8'; flags?: string | undefined }): string;
-    function readFile(path: string, opts?: { flags?: string | undefined }): Uint8Array;
-    function writeFile(path: string, data: string | ArrayBufferView, opts?: { flags?: string | undefined }): void;
-
-    //
-    // module-level FS code
-    //
-    function cwd(): string;
-    function chdir(path: string): void;
-    function init(
-        input: null | (() => number | null),
-        output: null | ((c: number) => any),
-        error: null | ((c: number) => any),
-    ): void;
-
-    function createLazyFile(
-        parent: string | FSNode,
-        name: string,
-        url: string,
-        canRead: boolean,
-        canWrite: boolean,
-    ): FSNode;
-    function createPreloadedFile(
-        parent: string | FSNode,
-        name: string,
-        url: string,
-        canRead: boolean,
-        canWrite: boolean,
-        onload?: () => void,
-        onerror?: () => void,
-        dontCreateFile?: boolean,
-        canOwn?: boolean,
-    ): void;
-    function createDataFile(
-        parent: string | FSNode,
-        name: string,
-        data: ArrayBufferView,
-        canRead: boolean,
-        canWrite: boolean,
-        canOwn: boolean,
-    ): FSNode;
+  interface Lookup {
+    path: string;
+    node: FSNode;
+  }
+
+  interface FSStream { }
+  interface FSNode { }
+  interface ErrnoError { }
+
+  let ignorePermissions: boolean;
+  let trackingDelegate: any;
+  let tracking: any;
+  let genericErrors: any;
+
+  //
+  // paths
+  //
+  function lookupPath(path: string, opts: any): Lookup;
+  function getPath(node: FSNode): string;
+
+  //
+  // nodes
+  //
+  function isFile(mode: number): boolean;
+  function isDir(mode: number): boolean;
+  function isLink(mode: number): boolean;
+  function isChrdev(mode: number): boolean;
+  function isBlkdev(mode: number): boolean;
+  function isFIFO(mode: number): boolean;
+  function isSocket(mode: number): boolean;
+
+  //
+  // devices
+  //
+  function major(dev: number): number;
+  function minor(dev: number): number;
+  function makedev(ma: number, mi: number): number;
+  function registerDevice(dev: number, ops: any): void;
+
+  //
+  // core
+  //
+  function syncfs(populate: boolean, callback: (e: any) => any): void;
+  function syncfs(callback: (e: any) => any, populate?: boolean): void;
+  function mount(type: Emscripten.FileSystemType, opts: any, mountpoint: string): any;
+  function unmount(mountpoint: string): void;
+
+  function mkdir(path: string, mode?: number): any;
+  function mkdev(path: string, mode?: number, dev?: number): any;
+  function symlink(oldpath: string, newpath: string): any;
+  function rename(old_path: string, new_path: string): void;
+  function rmdir(path: string): void;
+  function readdir(path: string): any;
+  function unlink(path: string): void;
+  function readlink(path: string): string;
+  function stat(path: string, dontFollow?: boolean): any;
+  function lstat(path: string): any;
+  function chmod(path: string, mode: number, dontFollow?: boolean): void;
+  function lchmod(path: string, mode: number): void;
+  function fchmod(fd: number, mode: number): void;
+  function chown(path: string, uid: number, gid: number, dontFollow?: boolean): void;
+  function lchown(path: string, uid: number, gid: number): void;
+  function fchown(fd: number, uid: number, gid: number): void;
+  function truncate(path: string, len: number): void;
+  function ftruncate(fd: number, len: number): void;
+  function utime(path: string, atime: number, mtime: number): void;
+  function open(path: string, flags: string, mode?: number, fd_start?: number, fd_end?: number): FSStream;
+  function close(stream: FSStream): void;
+  function llseek(stream: FSStream, offset: number, whence: number): any;
+  function read(stream: FSStream, buffer: ArrayBufferView, offset: number, length: number, position?: number): number;
+  function write(
+    stream: FSStream,
+    buffer: ArrayBufferView,
+    offset: number,
+    length: number,
+    position?: number,
+    canOwn?: boolean,
+  ): number;
+  function allocate(stream: FSStream, offset: number, length: number): void;
+  function mmap(
+    stream: FSStream,
+    buffer: ArrayBufferView,
+    offset: number,
+    length: number,
+    position: number,
+    prot: number,
+    flags: number,
+  ): any;
+  function ioctl(stream: FSStream, cmd: any, arg: any): any;
+  function readFile(path: string, opts: { encoding: 'binary'; flags?: string | undefined }): Uint8Array;
+  function readFile(path: string, opts: { encoding: 'utf8'; flags?: string | undefined }): string;
+  function readFile(path: string, opts?: { flags?: string | undefined }): Uint8Array;
+  function writeFile(path: string, data: string | ArrayBufferView, opts?: { flags?: string | undefined }): void;
+
+  //
+  // module-level FS code
+  //
+  function cwd(): string;
+  function chdir(path: string): void;
+  function init(
+    input: null | (() => number | null),
+    output: null | ((c: number) => any),
+    error: null | ((c: number) => any),
+  ): void;
+
+  function createLazyFile(
+    parent: string | FSNode,
+    name: string,
+    url: string,
+    canRead: boolean,
+    canWrite: boolean,
+  ): FSNode;
+  function createPreloadedFile(
+    parent: string | FSNode,
+    name: string,
+    url: string,
+    canRead: boolean,
+    canWrite: boolean,
+    onload?: () => void,
+    onerror?: () => void,
+    dontCreateFile?: boolean,
+    canOwn?: boolean,
+  ): void;
+  function createDataFile(
+    parent: string | FSNode,
+    name: string,
+    data: ArrayBufferView,
+    canRead: boolean,
+    canWrite: boolean,
+    canOwn: boolean,
+  ): FSNode;
 }
 
 declare var MEMFS: Emscripten.FileSystemType;
@@ -256,12 +256,12 @@ declare var IDBFS: Emscripten.FileSystemType;
 // https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html
 type StringToType<R extends any> = R extends Emscripten.JSType
   ? {
-      number: number;
-      string: string;
-      array: number[] | string[] | boolean[] | Uint8Array | Int8Array;
-      boolean: boolean;
-      null: null;
-    }[R]
+    number: number;
+    string: string;
+    array: number[] | string[] | boolean[] | Uint8Array | Int8Array;
+    boolean: boolean;
+    null: null;
+  }[R]
   : never;
 
 type ArgsToType<T extends Array<Emscripten.JSType | null>> = Extract<
@@ -271,9 +271,11 @@ type ArgsToType<T extends Array<Emscripten.JSType | null>> = Extract<
   any[]
 >;
 
-type ReturnToType<R extends Emscripten.JSType | null> = R extends null
+type ReturnToType<R extends Emscripten.JSType | null, O extends Emscripten.CCallOpts> = R extends null
   ? null
-  : StringToType<Exclude<R, null>>;
+  : O['async'] extends true ?
+  Promise<StringToType<Exclude<R, null>>> :
+  StringToType<Exclude<R, null>>
 
 // Below runtime function/variable declarations are exportable by
 // -s EXTRA_EXPORTED_RUNTIME_METHODS. You can extend or merge
@@ -291,33 +293,35 @@ type ReturnToType<R extends Emscripten.JSType | null> = R extends null
 
 declare function cwrap<
   I extends Array<Emscripten.JSType | null> | [],
-  R extends Emscripten.JSType | null
+  R extends Emscripten.JSType | null,
+  O extends Emscripten.CCallOpts
 >(
   ident: string,
   returnType: R,
   argTypes: I,
-  opts?: Emscripten.CCallOpts
-): (...arg: ArgsToType<I>) => ReturnToType<R>;
+  opts?: O
+): (...arg: ArgsToType<I>) => ReturnToType<R, O>;
 
 declare function ccall<
   I extends Array<Emscripten.JSType | null> | [],
-  R extends Emscripten.JSType | null
+  R extends Emscripten.JSType | null,
+  O extends Emscripten.CCallOpts
 >(
   ident: string,
   returnType: R,
   argTypes: I,
   args: ArgsToType<I>,
-  opts?: Emscripten.CCallOpts
-): ReturnToType<R>;
+  opts?: O
+): ReturnToType<R, O>;
 
 declare function setValue(ptr: number, value: any, type: Emscripten.CType, noSafe?: boolean): void;
 declare function getValue(ptr: number, type: Emscripten.CType, noSafe?: boolean): number;
 
 declare function allocate(
-    slab: number[] | ArrayBufferView | number,
-    types: Emscripten.CType | Emscripten.CType[],
-    allocator: number,
-    ptr?: number,
+  slab: number[] | ArrayBufferView | number,
+  types: Emscripten.CType | Emscripten.CType[],
+  allocator: number,
+  ptr?: number,
 ): number;
 
 declare function stackAlloc(size: number): number;
